
Variables
===========
    var : create mutable variable

    val : create ReadOnly/Immutable variable

Any : top level class object
        kotlin.unit

        if else can be use as expression
        when can be use as expression

Default return type is Unit is similar to void
Nothing is also return type. :- it never return throw an exception

function
==========
     default parameter and named parameter
     unlimited no of parameter using vararg

Class
========
Kotlin class does not have fields.
It has properties

lateinit is not allowed for primitive type
Custructor in class can be pass in class argument

init block in class is executed when instance of class is defined

secondary constructor which need to call base constructor.
Custom getter and setter

backing field can reference via field

4 Visibility Modifier
=====================
    public : anywhere
    private : same class
    internal : anywhere in same module
    protected : subclass

Kotlin Data Class
===================
Data class take care of toString, equals and hascode , getter/setter and copy function


Kotlin Enum class


Object in kotlin without class
    implement singleton pattern
    
    Companion object, which is an object that is common to all instances of that class. 
    Itâ€™d come to be similar to static fields in Java.

Inheritance
        By default class/method are final
        To allow inheritance add open in class/method definition

Abstract class same as java


Null Safety
==============
    A variable can't be initialized with null
    if null is required put '?' after type
        e.g var message:String? = null

Nested Classes in Kotlin

Companion objects are a way in which we can define what would be the equivalent to static methods in Java

Primary and Secondary Constuctor
================================
A class in Kotlin can have a primary constructor and one or more secondary constructors.
The primary constructor is part of the class header: it goes after the class name (and optional type parameters).
    class Person constructor(firstName: String) { ... }

If the primary constructor does not have any annotations or visibility modifiers,
the constructor keyword can be omitted:
    class Person(firstName: String) { ... }
    
The primary constructor cannot contain any code.
Initialization code can be placed in initializer blocks, 
which are prefixed with the init keyword    

The class can also declare secondary constructors, 
which are prefixed with constructor:

    class Person {
    constructor(parent: Person) {
        parent.children.add(this)
    }
    }
    
  If the class has a primary constructor, each secondary constructor needs to delegate to the primary constructor,
  either directly or indirectly through another secondary constructor(s).
  Delegation to another constructor of the same class is done using the this keyword:  
  
  class Person(val name: String) {
    constructor(name: String, parent: Person) : this(name) {
        parent.children.add(this)
    }
}








